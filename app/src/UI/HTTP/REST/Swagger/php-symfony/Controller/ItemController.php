<?php

/**
 * ItemController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  App\UI\HTTP\REST\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * API REST Todo - OpenAPI 3.0
 *
 * Spec API pour le projet Todo.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace App\UI\HTTP\REST\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use App\UI\HTTP\REST\Api\ItemApiInterface;
use App\UI\HTTP\REST\Model\Error;
use App\UI\HTTP\REST\Model\Item;
use App\UI\HTTP\REST\Model\PostItemRequest;

/**
 * ItemController Class Doc Comment
 *
 * @category Class
 * @package  App\UI\HTTP\REST\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class ItemController extends Controller
{

    /**
     * Operation createItem
     *
     * Create item for a list
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createItemAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $postItemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentType());
            $postItemRequest = $this->deserialize($postItemRequest, 'App\UI\HTTP\REST\Model\PostItemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("App\UI\HTTP\REST\Model\PostItemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($postItemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();


            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createItem($postItemRequest);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Successful operation';
                    break;
                case 400:
                    $message = 'Invalid request';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return ItemApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('item');
    }
}
